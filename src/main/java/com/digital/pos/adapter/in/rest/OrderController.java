package com.digital.pos.adapter.in.rest;

import com.digital.pos.adapter.in.rest.api.ApiUtil;
import com.digital.pos.adapter.in.rest.api.OrdersApi;
import com.digital.pos.adapter.in.rest.model.CreateOrderRequest;
import com.digital.pos.adapter.in.rest.model.OrderCreatedResponse;
import com.digital.pos.adapter.in.rest.model.OrderStatusResponse;
import com.digital.pos.application.port.in.CancelOrderUseCase;
import com.digital.pos.application.port.in.CreateOrderUseCase;
import com.digital.pos.application.port.in.GetOrderUseCase;
import com.digital.pos.application.port.in.ServeOrderUseCase;
import io.swagger.v3.oas.annotations.Parameter;
import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RestController;

/**
 * This controller implements the OrdersApi interface generated by OpenAPI. The interface has default methods that
 * return HttpStatus.NOT_IMPLEMENTED, so here we override them to provide the real behavior.
 */
@Validated
@Log4j2
@RestController
@AllArgsConstructor
public class OrderController implements OrdersApi {

  private final CreateOrderUseCase createOrderUseCase;
  private final ServeOrderUseCase serveOrderUseCase;
  private final CancelOrderUseCase cancelOrderUseCase;
  private final GetOrderUseCase getOrderUseCase;

  /**
   * POST /api/orders : Place a new order
   */
  @Override
  public ResponseEntity<OrderCreatedResponse> createOrder(
      @Parameter(description = "Create order request", required = true) CreateOrderRequest createOrderRequest) {

    log.info("Received request to create an order for shopId={}, menuItemId={}",
        createOrderRequest.getShopId(), createOrderRequest.getItems());

    OrderCreatedResponse response = createOrderUseCase.createOrder(createOrderRequest);

    log.info("Order created successfully. orderId={}, queueNumber={}, position={}",
        response.getOrderId(), response.getQueueNumber(), response.getLivePosition());

    return ResponseEntity.ok(response);
  }

  @Override
  public ResponseEntity<Void> serveOrder(Long orderId) {
    log.info("Received request to serve an order for shopId={}", orderId);
    serveOrderUseCase.serveOrder(orderId);

    log.info("Order served successfully. orderId={}", orderId);
    return ResponseEntity.ok().build();
  }

  @Override
  public ResponseEntity<Void> cancelOrder(Long orderId) {
    log.info("Received request to cancel an order for orderId={}", orderId);
    cancelOrderUseCase.cancelOrder(orderId);

    log.info("Order cancelled successfully. orderId={}", orderId);
    return ResponseEntity.ok().build();
  }

  //get order status
  @Override
  public ResponseEntity<OrderStatusResponse> getOrder(Long orderId) {
    log.info("Received request to get order status for orderId={}", orderId);
    OrderStatusResponse response = getOrderUseCase.getOrder(orderId);

    log.info("Order status retrieved successfully. orderId={}, status={}", orderId, response.getStatus());
    return ResponseEntity.ok(response);
  }

}
